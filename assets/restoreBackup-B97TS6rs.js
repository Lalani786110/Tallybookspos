import{_ as a,s as n}from"./main-uC-2Y8CS.js";async function u(c){try{const r=typeof c=="string"?JSON.parse(c):c;if(!r.metadata||!r.metadata.version)throw new Error("Invalid backup format");const{error:e}=await n.rpc("execute_sql",{sql:"BEGIN;"});if(e)throw e;try{const t=["companies","customers","products","tax_rates","tax_settings","purchases","purchase_items","sales","sale_items"];for(const s of t)if(r[s]&&Array.isArray(r[s])&&r[s].length>0){const{error:i}=await n.from(s).delete().neq("id","00000000-0000-0000-0000-000000000000");if(i)throw i;const{error:l}=await n.from(s).insert(r[s]);if(l)throw l}const{error:o}=await n.rpc("execute_sql",{sql:"COMMIT;"});if(o)throw o;return{success:!0}}catch(t){throw await n.rpc("execute_sql",{sql:"ROLLBACK;"}),t}}catch(r){return console.error("Error restoring backup:",r),{success:!1,error:r}}}async function p(c){var r;try{const e=await c.text();let t;try{t=JSON.parse(e)}catch{throw new Error("Invalid backup file format. Expected JSON.")}a.loading("Restoring database from backup...",{id:"restore-toast"});const o=await u(t);return a.dismiss("restore-toast"),o.success?a.success("Database restored successfully"):a.error(`Failed to restore database: ${((r=o.error)==null?void 0:r.message)||"Unknown error"}`),o}catch(e){return a.dismiss("restore-toast"),a.error(`Error processing backup file: ${e instanceof Error?e.message:"Unknown error"}`),{success:!1,error:e}}}export{p as handleBackupFileUpload,u as restoreBackup};
